write.table(df, file="Microarray/microarray_data/processed_data/processed_MA_results.txt", col.names=FALSE, row.names=FALSE, sep =",", quote = FALSE)
dataFile<-read.table("Microarray/microarray_data/processed_data/processed_MA_results.txt",sep=",", header = TRUE, row.names = 1)
cyber_t_results <- bayesT(dataFile,numC=3,numE=3,ppde=1, bayes=1, winSize=101, conf=4)
logFC <- log(cyber_t_results$meanE / cyber_t_results$meanC)
cyber_t_output <- data.frame(rownames(cyber_t_results), cyber_t_results$ppde.p, cyber_t_results$fold)
cyber_t_output <- data.frame(rownames(cyber_t_results), cyber_t_results$ppde.p, logFC)
cyber_t_output <- cyber_t_output[order(cyber_t_output$cyber_t_results.ppde.p, decreasing=TRUE), ]
write.table(cyber_t_output, file="Microarray/results/cyber_t_results.txt", quote = FALSE, row.names = FALSE, col.names = FALSE)
# Re-using a table from older study to associate gene names with probe names. (gene names <-> probe names <-> ECs name)
blast <- read.table("misc/SakaiRNASeq/3.Microarray_Vs_RNASeq/3.table merge/final_blast_Table.txt", sep='\t', header=TRUE)
corresponding_names <- merge(dplyr::select(blast, query.name, subject), dplyr::select(noNegData$genes, ProbeName, SystematicName), by.x="query.name", by.y="ProbeName")
corresponding_names <- unique(corresponding_names)
write.table(corresponding_names, file="Comparison/reference_table.txt")
library(memisc)
par(mfrow=c(2,3))
files <- list.files("RNAseq/RNAseq_countings", pattern="*.tsv$", full.names=TRUE, recursive=FALSE)
get_title <- function(x) {
title=cases(
"sample 1 : Control"=grepl("ERR2955747", x),
"sample 2 : Control"=grepl("ERR2955748", x),
"sample 3 : Control"=grepl("ERR2955749", x),
"sample 4 : with spinach leaves"=grepl("ERR2955750", x),
"sample 5 : with spinach leaves"=grepl("ERR2955751", x),
"sample 6 : with spinach leaves"=grepl("ERR2955752", x),
"wtfisthat"=TRUE
)
}
listplot <- function(x) {
data = read.csv(file = x, header = TRUE, sep = "\t", skip=1)
plot(data[,length(data)], type = "p",
main = get_title(x),
xlab = "genes",
ylab = "counts"
)
}
lapply(files,listplot)
getLastColumn <- function(x){
content = read.csv(file = x, header = TRUE, sep = "\t", skip=1)
return(content[,length(content)])
}
counts_list <- lapply(files,getLastColumn)
gene_ids <- read.csv(file = "RNAseq/RNAseq_countings/trimmed_ERR2955747.tsv", header = TRUE, sep = "\t", skip=1)[,1]
EBseq_counts_df <- data.frame(gene_ids)
EBseq_counts_df <- cbind(EBseq_counts_df, counts_list)
colnames(EBseq_counts_df) <- c("gene_id", "ERR2955750", "ERR2955751", "ERR2955752", "ERR2955747", "ERR2955748", "ERR2955749")
EBseq_counts_df <- EBseq_counts_df[c("gene_id", "ERR2955747", "ERR2955748", "ERR2955749", "ERR2955750", "ERR2955751", "ERR2955752")]
write.table(EBseq_counts_df, file="RNAseq/processed_counts.txt", row.names=FALSE,sep ="\t", quote = FALSE )
library(EBSeq)
counts = read.csv("RNAseq/processed_counts.txt", header = TRUE, sep = "\t")
data=as.matrix(counts)
rnames=counts[,1]
rownames(data)=rnames
data=data[,-1]
class(data)="numeric"
conditions = as.factor(c("C1","C1","C1","C2","C2","C2"))
Sizes=MedianNorm(data)
EBOut=EBTest(Data=data,Conditions=conditions,sizeFactors=Sizes, maxround=5)
EBDERes=GetDEResults(EBOut, FDR=0.05)
EBseq_results <-data.frame(EBDERes$PPMat, counts[2:7])
EBseq_results <- EBseq_results[order(EBseq_results$PPDE, decreasing=TRUE),]
rounds = 5
diff(EBOut$Alpha[(rounds-2):rounds,])
diff(EBOut$Beta[(rounds-2):rounds,])
diff(EBOut$P[(rounds-2):rounds,])
par(mfrow=c(1,1))
QQP(EBOut)
DenNHist(EBOut)
EBFC <- PostFC(EBOut)
df_EBFC <- as.data.frame(EBFC["PostFC"])
df_EBFC <- data.frame(ECs=rownames(df_EBFC), logFC=log(df_EBFC[,1]))
df1 <- data.frame(EBDERes$PPMat)
df1$names <- rownames(EBDERes$PPMat)
final_EBseq_results <- merge(df1, df_EBFC, by.x="names", by.y="ECs")
write.table(final_EBseq_results, file="RNAseq/EBseq/final_EBseq_results.tsv", sep="\t", row.names = FALSE, quote = FALSE)
cyber_t_results <- read.table("Microarray/results/cyber_t_results.txt")
colnames(cyber_t_results) <- c("gene_id", "cyber_t_PPDE", "cyber_t_logFC")
head(cyber_t_results)
cyber_t_results <- format(cyber_t_results, scientific = TRUE)
EBseq_results <- read.table("RNAseq/EBseq/final_EBseq_results.tsv", header=TRUE)
small_EBseq_results <- data.frame(gsub("ECs_", "ECs", EBseq_results$names), EBseq_results$PPDE, EBseq_results$logFC)
colnames(small_EBseq_results) <- c("gene_id", "EBseq_PPDE", "EBseq_logFC")
head(small_EBseq_results)
references <- read.table("Comparison/reference_table.txt")
EBseq_corresponding_genes <- merge(small_EBseq_results, references, by.x="gene_id", by.y="subject")
colnames(EBseq_corresponding_genes) <- c("ECs","EBseq_PPDE","EB_logFC","query.name", "SystematicName")
# Results from the paper for microarray (using limma)
limma_results<-read.table("misc/SakaiRNASeq/1.Microarray_Data_Analysis/microarrayTopTable.txt",sep='\t', header = TRUE)
# This file got an error in the naming of the columns. They are all misaligned of one col to the left. Need a fix
# bad_colnames <- colnames(limma_results)
# new_colnames <-c(bad_colnames[length(bad_colnames)], bad_colnames[1:length(bad_colnames)-1])
# colnames(limma_results) <- new_colnames
small_limma_results <- dplyr::select(limma_results, SystematicName, logFC, adj.P.Val)
colnames(small_limma_results) <- c("gene_id", "limma_logFC", "limma_Pval")
rnaseq_results <- read.table("misc/SakaiRNASeq/2.RNASeq_Data_Analysis/3. DEG_analysis/RNAseqTopTable-Paired.txt", skip=1)
colnames(rnaseq_results) <- c("ECs", "logFC", "t", "P.Value", "adj.P.Val", "b")
FeatureCounts_corresponding_genes <- merge(rnaseq_results, references, by.x="ECs", by.y="subject")
FeatureCounts_corresponding_genes <- data.frame(FeatureCounts_corresponding_genes$SystematicName, FeatureCounts_corresponding_genes$P.Value,FeatureCounts_corresponding_genes$logFC)
colnames(FeatureCounts_corresponding_genes) <- c("gene_id", "featureCounts_Pval", "featureCounts_logFC")
summary <- merge(cyber_t_results, EBseq_corresponding_genes, by.x="gene_id", by.y="SystematicName")
summary <- merge(summary, FeatureCounts_corresponding_genes, by="gene_id")
summary <- merge(summary, small_limma_results, by="gene_id")
colnames(summary)
summary <- summary[c("gene_id", "cyber_t_logFC", "EB_logFC", "limma_logFC", "featureCounts_logFC", "cyber_t_PPDE", "EBseq_PPDE", "limma_Pval", "featureCounts_Pval")]
ppde_summary <- merge(cyber_t_results, EBseq_corresponding_genes, by.x="gene_id", by.y="SystematicName")
ppde_summary <- merge(ppde_summary, FeatureCounts_corresponding_genes, by="gene_id")
head(ppde_summary)
ppde_summary[complete.cases(ppde_summary), ]
EB_exp_mat_for_moomin <- data.frame(EBseq_corresponding_genes$SystematicName, EBseq_corresponding_genes$EBseq_PPDE, EBseq_corresponding_genes$EB_logFC)
colnames(EB_exp_mat_for_moomin) <- c("GeneID", "PPDE", "FC")
write.table(EB_exp_mat_for_moomin, file = "Moomin_input/EBseq_res.tsv", quote=F, sep="\t", row.names = F)
View(small_limma_results)
summary <- merge(cyber_t_results, EBseq_corresponding_genes, by.x="gene_id", by.y="SystematicName")
View(summary)
library(knitr)
library(rmdformats)
library(DT)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(limma)
library(gplots)
library(dplyr)
source("Microarray/scripts/bayesreg.R")
setwd("Microarray/microarray_data/raw_data")
summaryTable<-read.delim("summaryTable.txt",check.names=FALSE,stringsAsFactors=FALSE)
microarrayData <-read.maimages(summaryTable[,"FileName"],source="agilent",green.only=TRUE)
neg95 <- apply(microarrayData$E[microarrayData$genes$ControlType==-1,],2,function(x) quantile(x,p=0.95)) #95 percentile of negative probes
cutoff <- matrix(1.1*neg95,nrow(microarrayData),ncol(microarrayData),byrow=TRUE) # keep probes that are 10% brighter than the negative probes
filtered <- rowSums(microarrayData$E > cutoff) >= 3
noNegData <- microarrayData[microarrayData$genes$ControlType==0 & filtered,]
df <- as.data.frame(noNegData$E)
df <- cbind(noNegData$genes$SystematicName,df)
df <- aggregate(df[,2:7], list(df$`noNegData$genes$SystematicName`), median) # Merging duplicates and keeping median values
colnames(df) <- c("gene_id", "C1", "C2", "C3", "E1", "E2", "E3" )
df <- df[c("gene_id", "E1", "E2", "E3", "C1", "C2", "C3")] # Rearranging df so our values are in the same order than RNAseq data
df <- format(df,  scientific = TRUE)
write.table(df, file="Microarray/microarray_data/processed_data/processed_MA_results.txt", col.names=FALSE, row.names=FALSE, sep =",", quote = FALSE)
dataFile<-read.table("Microarray/microarray_data/processed_data/processed_MA_results.txt",sep=",", header = TRUE, row.names = 1)
cyber_t_results <- bayesT(dataFile,numC=3,numE=3,ppde=1, bayes=1, winSize=101, conf=4)
logFC <- log(cyber_t_results$meanE / cyber_t_results$meanC)
cyber_t_output <- data.frame(rownames(cyber_t_results), cyber_t_results$ppde.p, cyber_t_results$fold)
cyber_t_output <- data.frame(rownames(cyber_t_results), cyber_t_results$ppde.p, logFC)
cyber_t_output <- cyber_t_output[order(cyber_t_output$cyber_t_results.ppde.p, decreasing=TRUE), ]
write.table(cyber_t_output, file="Microarray/results/cyber_t_results.txt", quote = FALSE, row.names = FALSE, col.names = FALSE)
# Re-using a table from older study to associate gene names with probe names. (gene names <-> probe names <-> ECs name)
blast <- read.table("misc/SakaiRNASeq/3.Microarray_Vs_RNASeq/3.table merge/final_blast_Table.txt", sep='\t', header=TRUE)
corresponding_names <- merge(dplyr::select(blast, query.name, subject), dplyr::select(noNegData$genes, ProbeName, SystematicName), by.x="query.name", by.y="ProbeName")
corresponding_names <- unique(corresponding_names)
write.table(corresponding_names, file="Comparison/reference_table.txt")
library(memisc)
par(mfrow=c(2,3))
files <- list.files("RNAseq/RNAseq_countings", pattern="*.tsv$", full.names=TRUE, recursive=FALSE)
get_title <- function(x) {
title=cases(
"sample 1 : Control"=grepl("ERR2955747", x),
"sample 2 : Control"=grepl("ERR2955748", x),
"sample 3 : Control"=grepl("ERR2955749", x),
"sample 4 : with spinach leaves"=grepl("ERR2955750", x),
"sample 5 : with spinach leaves"=grepl("ERR2955751", x),
"sample 6 : with spinach leaves"=grepl("ERR2955752", x),
"wtfisthat"=TRUE
)
}
listplot <- function(x) {
data = read.csv(file = x, header = TRUE, sep = "\t", skip=1)
plot(data[,length(data)], type = "p",
main = get_title(x),
xlab = "genes",
ylab = "counts"
)
}
lapply(files,listplot)
getLastColumn <- function(x){
content = read.csv(file = x, header = TRUE, sep = "\t", skip=1)
return(content[,length(content)])
}
counts_list <- lapply(files,getLastColumn)
gene_ids <- read.csv(file = "RNAseq/RNAseq_countings/trimmed_ERR2955747.tsv", header = TRUE, sep = "\t", skip=1)[,1]
EBseq_counts_df <- data.frame(gene_ids)
EBseq_counts_df <- cbind(EBseq_counts_df, counts_list)
colnames(EBseq_counts_df) <- c("gene_id", "ERR2955750", "ERR2955751", "ERR2955752", "ERR2955747", "ERR2955748", "ERR2955749")
EBseq_counts_df <- EBseq_counts_df[c("gene_id", "ERR2955747", "ERR2955748", "ERR2955749", "ERR2955750", "ERR2955751", "ERR2955752")]
write.table(EBseq_counts_df, file="RNAseq/processed_counts.txt", row.names=FALSE,sep ="\t", quote = FALSE )
library(EBSeq)
counts = read.csv("RNAseq/processed_counts.txt", header = TRUE, sep = "\t")
data=as.matrix(counts)
rnames=counts[,1]
rownames(data)=rnames
data=data[,-1]
class(data)="numeric"
conditions = as.factor(c("C1","C1","C1","C2","C2","C2"))
Sizes=MedianNorm(data)
EBOut=EBTest(Data=data,Conditions=conditions,sizeFactors=Sizes, maxround=5)
EBDERes=GetDEResults(EBOut, FDR=0.05)
EBseq_results <-data.frame(EBDERes$PPMat, counts[2:7])
EBseq_results <- EBseq_results[order(EBseq_results$PPDE, decreasing=TRUE),]
rounds = 5
diff(EBOut$Alpha[(rounds-2):rounds,])
diff(EBOut$Beta[(rounds-2):rounds,])
diff(EBOut$P[(rounds-2):rounds,])
par(mfrow=c(1,1))
QQP(EBOut)
DenNHist(EBOut)
EBFC <- PostFC(EBOut)
df_EBFC <- as.data.frame(EBFC["PostFC"])
df_EBFC <- data.frame(ECs=rownames(df_EBFC), logFC=log(df_EBFC[,1]))
df1 <- data.frame(EBDERes$PPMat)
df1$names <- rownames(EBDERes$PPMat)
final_EBseq_results <- merge(df1, df_EBFC, by.x="names", by.y="ECs")
write.table(final_EBseq_results, file="RNAseq/EBseq/final_EBseq_results.tsv", sep="\t", row.names = FALSE, quote = FALSE)
cyber_t_results <- read.table("Microarray/results/cyber_t_results.txt")
colnames(cyber_t_results) <- c("gene_id", "cyber_t_PPDE", "cyber_t_logFC")
head(cyber_t_results)
cyber_t_results <- format(cyber_t_results, scientific = TRUE)
EBseq_results <- read.table("RNAseq/EBseq/final_EBseq_results.tsv", header=TRUE)
small_EBseq_results <- data.frame(gsub("ECs_", "ECs", EBseq_results$names), EBseq_results$PPDE, EBseq_results$logFC)
colnames(small_EBseq_results) <- c("gene_id", "EBseq_PPDE", "EBseq_logFC")
head(small_EBseq_results)
references <- read.table("Comparison/reference_table.txt")
EBseq_corresponding_genes <- merge(small_EBseq_results, references, by.x="gene_id", by.y="subject")
colnames(EBseq_corresponding_genes) <- c("ECs","EBseq_PPDE","EB_logFC","query.name", "SystematicName")
# Results from the paper for microarray (using limma)
limma_results<-read.table("misc/SakaiRNASeq/1.Microarray_Data_Analysis/microarrayTopTable.txt",sep='\t', header = TRUE)
# This file got an error in the naming of the columns. They are all misaligned of one col to the left. Need a fix
# bad_colnames <- colnames(limma_results)
# new_colnames <-c(bad_colnames[length(bad_colnames)], bad_colnames[1:length(bad_colnames)-1])
# colnames(limma_results) <- new_colnames
small_limma_results <- dplyr::select(limma_results, SystematicName, logFC, adj.P.Val)
colnames(small_limma_results) <- c("gene_id", "limma_logFC", "limma_Pval")
rnaseq_results <- read.table("misc/SakaiRNASeq/2.RNASeq_Data_Analysis/3. DEG_analysis/RNAseqTopTable-Paired.txt", skip=1)
colnames(rnaseq_results) <- c("ECs", "logFC", "t", "P.Value", "adj.P.Val", "b")
FeatureCounts_corresponding_genes <- merge(rnaseq_results, references, by.x="ECs", by.y="subject")
FeatureCounts_corresponding_genes <- data.frame(FeatureCounts_corresponding_genes$SystematicName, FeatureCounts_corresponding_genes$P.Value,FeatureCounts_corresponding_genes$logFC)
colnames(FeatureCounts_corresponding_genes) <- c("gene_id", "featureCounts_Pval", "featureCounts_logFC")
summary <- merge(cyber_t_results, EBseq_corresponding_genes, by.x="gene_id", by.y="SystematicName")
summary <- merge(summary, FeatureCounts_corresponding_genes, by="gene_id")
summary <- merge(summary, small_limma_results, by="gene_id")
colnames(summary)
summary <- summary[c("gene_id", "cyber_t_logFC", "EB_logFC", "limma_logFC", "featureCounts_logFC", "cyber_t_PPDE", "EBseq_PPDE", "limma_Pval", "featureCounts_Pval")]
ppde_summary <- merge(cyber_t_results, EBseq_corresponding_genes, by.x="gene_id", by.y="SystematicName")
ppde_summary <- merge(ppde_summary, FeatureCounts_corresponding_genes, by="gene_id")
head(ppde_summary)
ppde_summary[complete.cases(ppde_summary), ]
EB_exp_mat_for_moomin <- data.frame(EBseq_corresponding_genes$SystematicName, EBseq_corresponding_genes$EBseq_PPDE, EBseq_corresponding_genes$EB_logFC)
colnames(EB_exp_mat_for_moomin) <- c("GeneID", "PPDE", "FC")
write.table(EB_exp_mat_for_moomin, file = "Moomin_input/EBseq_res.tsv", quote=F, sep="\t", row.names = F)
View(summary)
summary[complete.cases(summary), ]
View(summary)
format(summary, scientific = FALSE)
format(summary, scientific = FALSE)
summary <- merge(cyber_t_results, EBseq_corresponding_genes, by.x="gene_id", by.y="SystematicName")
summary <- merge(summary, FeatureCounts_corresponding_genes, by="gene_id")
summary <- merge(summary, small_limma_results, by="gene_id")
colnames(summary)
summary <- summary[c("gene_id", "cyber_t_logFC", "EB_logFC", "limma_logFC", "featureCounts_logFC", "cyber_t_PPDE", "EBseq_PPDE", "limma_Pval", "featureCounts_Pval")]
summary[complete.cases(summary), ]
format(summary, scientific = FALSE)
library(knitr)
library(rmdformats)
library(DT)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(limma)
library(gplots)
library(dplyr)
source("Microarray/scripts/bayesreg.R")
setwd("Microarray/microarray_data/raw_data")
summaryTable<-read.delim("summaryTable.txt",check.names=FALSE,stringsAsFactors=FALSE)
microarrayData <-read.maimages(summaryTable[,"FileName"],source="agilent",green.only=TRUE)
neg95 <- apply(microarrayData$E[microarrayData$genes$ControlType==-1,],2,function(x) quantile(x,p=0.95)) #95 percentile of negative probes
cutoff <- matrix(1.1*neg95,nrow(microarrayData),ncol(microarrayData),byrow=TRUE) # keep probes that are 10% brighter than the negative probes
filtered <- rowSums(microarrayData$E > cutoff) >= 3
noNegData <- microarrayData[microarrayData$genes$ControlType==0 & filtered,]
df <- as.data.frame(noNegData$E)
df <- cbind(noNegData$genes$SystematicName,df)
df <- aggregate(df[,2:7], list(df$`noNegData$genes$SystematicName`), median) # Merging duplicates and keeping median values
colnames(df) <- c("gene_id", "C1", "C2", "C3", "E1", "E2", "E3" )
df <- df[c("gene_id", "E1", "E2", "E3", "C1", "C2", "C3")] # Rearranging df so our values are in the same order than RNAseq data
df <- format(df,  scientific = TRUE)
write.table(df, file="Microarray/microarray_data/processed_data/processed_MA_results.txt", col.names=FALSE, row.names=FALSE, sep =",", quote = FALSE)
dataFile<-read.table("Microarray/microarray_data/processed_data/processed_MA_results.txt",sep=",", header = TRUE, row.names = 1)
cyber_t_results <- bayesT(dataFile,numC=3,numE=3,ppde=1, bayes=1, winSize=101, conf=4)
logFC <- log(cyber_t_results$meanE / cyber_t_results$meanC)
cyber_t_output <- data.frame(rownames(cyber_t_results), cyber_t_results$ppde.p, cyber_t_results$fold)
cyber_t_output <- data.frame(rownames(cyber_t_results), cyber_t_results$ppde.p, logFC)
cyber_t_output <- cyber_t_output[order(cyber_t_output$cyber_t_results.ppde.p, decreasing=TRUE), ]
write.table(cyber_t_output, file="Microarray/results/cyber_t_results.txt", quote = FALSE, row.names = FALSE, col.names = FALSE)
# Re-using a table from older study to associate gene names with probe names. (gene names <-> probe names <-> ECs name)
blast <- read.table("misc/SakaiRNASeq/3.Microarray_Vs_RNASeq/3.table merge/final_blast_Table.txt", sep='\t', header=TRUE)
corresponding_names <- merge(dplyr::select(blast, query.name, subject), dplyr::select(noNegData$genes, ProbeName, SystematicName), by.x="query.name", by.y="ProbeName")
corresponding_names <- unique(corresponding_names)
write.table(corresponding_names, file="Comparison/reference_table.txt")
library(memisc)
par(mfrow=c(2,3))
files <- list.files("RNAseq/RNAseq_countings", pattern="*.tsv$", full.names=TRUE, recursive=FALSE)
get_title <- function(x) {
title=cases(
"sample 1 : Control"=grepl("ERR2955747", x),
"sample 2 : Control"=grepl("ERR2955748", x),
"sample 3 : Control"=grepl("ERR2955749", x),
"sample 4 : with spinach leaves"=grepl("ERR2955750", x),
"sample 5 : with spinach leaves"=grepl("ERR2955751", x),
"sample 6 : with spinach leaves"=grepl("ERR2955752", x),
"wtfisthat"=TRUE
)
}
listplot <- function(x) {
data = read.csv(file = x, header = TRUE, sep = "\t", skip=1)
plot(data[,length(data)], type = "p",
main = get_title(x),
xlab = "genes",
ylab = "counts"
)
}
lapply(files,listplot)
getLastColumn <- function(x){
content = read.csv(file = x, header = TRUE, sep = "\t", skip=1)
return(content[,length(content)])
}
counts_list <- lapply(files,getLastColumn)
gene_ids <- read.csv(file = "RNAseq/RNAseq_countings/trimmed_ERR2955747.tsv", header = TRUE, sep = "\t", skip=1)[,1]
EBseq_counts_df <- data.frame(gene_ids)
EBseq_counts_df <- cbind(EBseq_counts_df, counts_list)
colnames(EBseq_counts_df) <- c("gene_id", "ERR2955750", "ERR2955751", "ERR2955752", "ERR2955747", "ERR2955748", "ERR2955749")
EBseq_counts_df <- EBseq_counts_df[c("gene_id", "ERR2955747", "ERR2955748", "ERR2955749", "ERR2955750", "ERR2955751", "ERR2955752")]
write.table(EBseq_counts_df, file="RNAseq/processed_counts.txt", row.names=FALSE,sep ="\t", quote = FALSE )
library(EBSeq)
counts = read.csv("RNAseq/processed_counts.txt", header = TRUE, sep = "\t")
data=as.matrix(counts)
rnames=counts[,1]
rownames(data)=rnames
data=data[,-1]
class(data)="numeric"
conditions = as.factor(c("C1","C1","C1","C2","C2","C2"))
Sizes=MedianNorm(data)
EBOut=EBTest(Data=data,Conditions=conditions,sizeFactors=Sizes, maxround=5)
EBDERes=GetDEResults(EBOut, FDR=0.05)
EBseq_results <-data.frame(EBDERes$PPMat, counts[2:7])
EBseq_results <- EBseq_results[order(EBseq_results$PPDE, decreasing=TRUE),]
rounds = 5
diff(EBOut$Alpha[(rounds-2):rounds,])
diff(EBOut$Beta[(rounds-2):rounds,])
diff(EBOut$P[(rounds-2):rounds,])
par(mfrow=c(1,1))
QQP(EBOut)
DenNHist(EBOut)
EBFC <- PostFC(EBOut)
df_EBFC <- as.data.frame(EBFC["PostFC"])
df_EBFC <- data.frame(ECs=rownames(df_EBFC), logFC=log(df_EBFC[,1]))
df1 <- data.frame(EBDERes$PPMat)
df1$names <- rownames(EBDERes$PPMat)
final_EBseq_results <- merge(df1, df_EBFC, by.x="names", by.y="ECs")
write.table(final_EBseq_results, file="RNAseq/EBseq/final_EBseq_results.tsv", sep="\t", row.names = FALSE, quote = FALSE)
cyber_t_results <- read.table("Microarray/results/cyber_t_results.txt")
colnames(cyber_t_results) <- c("gene_id", "cyber_t_PPDE", "cyber_t_logFC")
head(cyber_t_results)
cyber_t_results <- format(cyber_t_results, scientific = FALSE)
EBseq_results <- read.table("RNAseq/EBseq/final_EBseq_results.tsv", header=TRUE)
small_EBseq_results <- data.frame(gsub("ECs_", "ECs", EBseq_results$names), EBseq_results$PPDE, EBseq_results$logFC)
colnames(small_EBseq_results) <- c("gene_id", "EBseq_PPDE", "EBseq_logFC")
head(small_EBseq_results)
references <- read.table("Comparison/reference_table.txt")
EBseq_corresponding_genes <- merge(small_EBseq_results, references, by.x="gene_id", by.y="subject")
colnames(EBseq_corresponding_genes) <- c("ECs","EBseq_PPDE","EB_logFC","query.name", "SystematicName")
# Results from the paper for microarray (using limma)
limma_results<-read.table("misc/SakaiRNASeq/1.Microarray_Data_Analysis/microarrayTopTable.txt",sep='\t', header = TRUE)
# This file got an error in the naming of the columns. They are all misaligned of one col to the left. Need a fix
# bad_colnames <- colnames(limma_results)
# new_colnames <-c(bad_colnames[length(bad_colnames)], bad_colnames[1:length(bad_colnames)-1])
# colnames(limma_results) <- new_colnames
small_limma_results <- dplyr::select(limma_results, SystematicName, logFC, adj.P.Val)
colnames(small_limma_results) <- c("gene_id", "limma_logFC", "limma_Pval")
rnaseq_results <- read.table("misc/SakaiRNASeq/2.RNASeq_Data_Analysis/3. DEG_analysis/RNAseqTopTable-Paired.txt", skip=1)
colnames(rnaseq_results) <- c("ECs", "logFC", "t", "P.Value", "adj.P.Val", "b")
FeatureCounts_corresponding_genes <- merge(rnaseq_results, references, by.x="ECs", by.y="subject")
FeatureCounts_corresponding_genes <- data.frame(FeatureCounts_corresponding_genes$SystematicName, FeatureCounts_corresponding_genes$P.Value,FeatureCounts_corresponding_genes$logFC)
colnames(FeatureCounts_corresponding_genes) <- c("gene_id", "featureCounts_Pval", "featureCounts_logFC")
summary <- merge(cyber_t_results, EBseq_corresponding_genes, by.x="gene_id", by.y="SystematicName")
summary <- merge(summary, FeatureCounts_corresponding_genes, by="gene_id")
summary <- merge(summary, small_limma_results, by="gene_id")
summary <- summary[c("gene_id", "cyber_t_logFC", "EB_logFC", "limma_logFC", "featureCounts_logFC", "cyber_t_PPDE", "EBseq_PPDE", "limma_Pval", "featureCounts_Pval")]
summary[complete.cases(summary), ]
format(summary, scientific = FALSE)
EB_exp_mat_for_moomin <- data.frame(EBseq_corresponding_genes$SystematicName, EBseq_corresponding_genes$EBseq_PPDE, EBseq_corresponding_genes$EB_logFC)
colnames(EB_exp_mat_for_moomin) <- c("GeneID", "PPDE", "FC")
write.table(EB_exp_mat_for_moomin, file = "Moomin_input/EBseq_res.tsv", quote=F, sep="\t", row.names = F)
summary<-summary[summary$cyber_t_PPDE > 0.95 & summary$EBseq_PPDE > 0.95 & summary$limma_Pval < 0.05 & summary$featureCounts_Pval < 0.05]
summary<-summary[(summary$cyber_t_PPDE > 0.95 & summary$EBseq_PPDE > 0.95 & summary$limma_Pval < 0.05 & summary$featureCounts_Pval < 0.05),]
dim(summary)
summary[complete.cases(summary), ]
summary <- merge(cyber_t_results, EBseq_corresponding_genes, by.x="gene_id", by.y="SystematicName")
summary <- merge(summary, FeatureCounts_corresponding_genes, by="gene_id")
summary <- merge(summary, small_limma_results, by="gene_id")
summary <- summary[c("gene_id", "cyber_t_logFC", "EB_logFC", "limma_logFC", "featureCounts_logFC", "cyber_t_PPDE", "EBseq_PPDE", "limma_Pval", "featureCounts_Pval")]
summary<-summary[(summary$cyber_t_PPDE > 0.95 & summary$EBseq_PPDE > 0.95 & summary$limma_Pval < 0.05 & summary$featureCounts_Pval < 0.05),]
dim(summary)
summary <- merge(cyber_t_results, EBseq_corresponding_genes, by.x="gene_id", by.y="SystematicName")
summary <- merge(summary, FeatureCounts_corresponding_genes, by="gene_id")
summary <- merge(summary, small_limma_results, by="gene_id")
summary <- summary[c("gene_id", "cyber_t_logFC", "EB_logFC", "limma_logFC", "featureCounts_logFC", "cyber_t_PPDE", "EBseq_PPDE", "limma_Pval", "featureCounts_Pval")]
dim(summary)
summary<-summary[(summary$cyber_t_PPDE > 0.95 & summary$EBseq_PPDE > 0.95 & summary$limma_Pval < 0.05 & summary$featureCounts_Pval < 0.05),]
dim(summary)
dim(summary)
summary[complete.cases(summary), ]
dim(summary)
summary <- na.omit(summary)
dim(summary)
plot(summary$limma_logFC, summary$rna_logFC)
rho_limma_vs_FC <- cor.test(~ as.numeric(summary$limma_logFC) + as.numeric(summary$rna_logFC), data=summary, method = "spearman", continuity = TRUE)$estimate
plot(summary$EB_logFC, summary$rna_logFC)
rho_EB_vs_FC <- cor.test(~ as.numeric(summary$EB_logFC) + as.numeric(summary$rna_logFC), data=summary, method = "spearman", continuity = TRUE)$estimate
plot(summary$cyber_t_logFC, summary$limma_logFC)
rho_cyber_t_VS_limma <- cor.test(~ as.numeric(summary$cyber_t_logFC) + as.numeric(summary$limma_logFC), data=summary, method = "spearman", continuity = TRUE)$estimate
r_squared_cyber_t_vs_limma <- summary(lm(summary$cyber_t_logFC ~ summary$limma_logFC, data=summary))$adj.r.squared
plot(summary$cyber_t_logFC, summary$EB_logFC)
rho_cyber_t_vs_EB <- cor.test(~ as.numeric(summary$cyber_t_logFC) + as.numeric(summary$EB_logFC), data=summary, method = "spearman", continuity = TRUE)$estimate
r_squared_cyber_t_vs_EB <- summary(lm(summary$cyber_t_logFC ~ summary$EB_logFC, data=summary))$adj.r.squared
summary <- merge(cyber_t_results, EBseq_corresponding_genes, by.x="gene_id", by.y="SystematicName")
summary <- merge(summary, FeatureCounts_corresponding_genes, by="gene_id")
summary <- merge(summary, small_limma_results, by="gene_id")
summary <- summary[c("gene_id", "cyber_t_logFC", "EB_logFC", "limma_logFC", "featureCounts_logFC", "cyber_t_PPDE", "EBseq_PPDE", "limma_Pval", "featureCounts_Pval")]
plot(summary$limma_logFC, summary$rna_logFC)
rho_limma_vs_FC <- cor.test(~ as.numeric(summary$limma_logFC) + as.numeric(summary$rna_logFC), data=summary, method = "spearman", continuity = TRUE)$estimate
cyber_t_results <- read.table("Microarray/results/cyber_t_results.txt")
colnames(cyber_t_results) <- c("gene_id", "cyber_t_PPDE", "cyber_t_logFC")
head(cyber_t_results)
cyber_t_results <- format(cyber_t_results, scientific = FALSE)
EBseq_results <- read.table("RNAseq/EBseq/final_EBseq_results.tsv", header=TRUE)
small_EBseq_results <- data.frame(gsub("ECs_", "ECs", EBseq_results$names), EBseq_results$PPDE, EBseq_results$logFC)
colnames(small_EBseq_results) <- c("gene_id", "EBseq_PPDE", "EBseq_logFC")
head(small_EBseq_results)
references <- read.table("Comparison/reference_table.txt")
EBseq_corresponding_genes <- merge(small_EBseq_results, references, by.x="gene_id", by.y="subject")
colnames(EBseq_corresponding_genes) <- c("ECs","EBseq_PPDE","EB_logFC","query.name", "SystematicName")
# Results from the paper for microarray (using limma)
limma_results<-read.table("misc/SakaiRNASeq/1.Microarray_Data_Analysis/microarrayTopTable.txt",sep='\t', header = TRUE)
# This file got an error in the naming of the columns. They are all misaligned of one col to the left. Need a fix
# bad_colnames <- colnames(limma_results)
# new_colnames <-c(bad_colnames[length(bad_colnames)], bad_colnames[1:length(bad_colnames)-1])
# colnames(limma_results) <- new_colnames
small_limma_results <- dplyr::select(limma_results, SystematicName, logFC, adj.P.Val)
colnames(small_limma_results) <- c("gene_id", "limma_logFC", "limma_Pval")
rnaseq_results <- read.table("misc/SakaiRNASeq/2.RNASeq_Data_Analysis/3. DEG_analysis/RNAseqTopTable-Paired.txt", skip=1)
colnames(rnaseq_results) <- c("ECs", "logFC", "t", "P.Value", "adj.P.Val", "b")
FeatureCounts_corresponding_genes <- merge(rnaseq_results, references, by.x="ECs", by.y="subject")
FeatureCounts_corresponding_genes <- data.frame(FeatureCounts_corresponding_genes$SystematicName, FeatureCounts_corresponding_genes$P.Value,FeatureCounts_corresponding_genes$logFC)
colnames(FeatureCounts_corresponding_genes) <- c("gene_id", "featureCounts_Pval", "featureCounts_logFC")
summary <- merge(cyber_t_results, EBseq_corresponding_genes, by.x="gene_id", by.y="SystematicName")
summary <- merge(summary, FeatureCounts_corresponding_genes, by="gene_id")
summary <- merge(summary, small_limma_results, by="gene_id")
summary <- summary[c("gene_id", "cyber_t_logFC", "EB_logFC", "limma_logFC", "featureCounts_logFC", "cyber_t_PPDE", "EBseq_PPDE", "limma_Pval", "featureCounts_Pval")]
dim(summary)
summary[complete.cases(summary), ]
#summary <- na.omit(summary)
dim(summary)
plot(summary$limma_logFC, summary$rna_logFC)
rho_limma_vs_FC <- cor.test(~ as.numeric(summary$limma_logFC) + as.numeric(summary$rna_logFC), data=summary, method = "spearman", continuity = TRUE)$estimate
plot(summary$EB_logFC, summary$featureCounts_logFC)
rho_EB_vs_FC <- cor.test(~ as.numeric(summary$EB_logFC) + as.numeric(summary$featureCounts_logFC), data=summary, method = "spearman", continuity = TRUE)$estimate
r_squared_EB_vs_FC <- summary(lm(summary$EB_logFC ~ summary$featureCounts_logFC, data=summary))$adj.r.squared
plot(summary$cyber_t_logFC, summary$limma_logFC)
rho_cyber_t_VS_limma <- cor.test(~ as.numeric(summary$cyber_t_logFC) + as.numeric(summary$limma_logFC), data=summary, method = "spearman", continuity = TRUE)$estimate
r_squared_cyber_t_vs_limma <- summary(lm(summary$cyber_t_logFC ~ summary$limma_logFC, data=summary))$adj.r.squared
plot(summary$cyber_t_logFC, summary$EB_logFC)
rho_cyber_t_vs_EB <- cor.test(~ as.numeric(summary$cyber_t_logFC) + as.numeric(summary$EB_logFC), data=summary, method = "spearman", continuity = TRUE)$estimate
r_squared_cyber_t_vs_EB <- summary(lm(summary$cyber_t_logFC ~ summary$EB_logFC, data=summary))$adj.r.squared
EB_exp_mat_for_moomin <- data.frame(EBseq_corresponding_genes$SystematicName, EBseq_corresponding_genes$EBseq_PPDE, EBseq_corresponding_genes$EB_logFC)
colnames(EB_exp_mat_for_moomin) <- c("GeneID", "PPDE", "FC")
write.table(EB_exp_mat_for_moomin, file = "Moomin_input/EBseq_res.tsv", quote=F, sep="\t", row.names = F)
plot(summary$EB_logFC, summary$featureCounts_logFC)
rho_EB_vs_FC <- cor.test(~ as.numeric(summary$EB_logFC) + as.numeric(summary$featureCounts_logFC), data=summary, method = "spearman", continuity = TRUE)$estimate
r_squared_EB_vs_FC <- summary(lm(summary$EB_logFC ~ summary$featureCounts_logFC, data=summary))$adj.r.squared
plot(summary$limma_logFC, summary$featureCounts_logFC)
rho_limma_vs_FC <- cor.test(~ as.numeric(summary$limma_logFC) + as.numeric(summary$featureCounts_logFC), data=summary, method = "spearman", continuity = TRUE)$estimate
r_squared_limma_vs_FC <- summary(lm(summary$limma_logFC ~ summary$featureCounts_logFC, data=summary))$adj.r.squared
dim(summary)
summary[complete.cases(summary), ]
summary <- na.omit(summary)
dim(summary)
plot(summary$limma_logFC, summary$featureCounts_logFC)
rho_limma_vs_FC <- cor.test(~ as.numeric(summary$limma_logFC) + as.numeric(summary$featureCounts_logFC), data=summary, method = "spearman", continuity = TRUE)$estimate
r_squared_limma_vs_FC <- summary(lm(summary$limma_logFC ~ summary$featureCounts_logFC, data=summary))$adj.r.squared
plot(summary$EB_logFC, summary$featureCounts_logFC)
rho_EB_vs_FC <- cor.test(~ as.numeric(summary$EB_logFC) + as.numeric(summary$featureCounts_logFC), data=summary, method = "spearman", continuity = TRUE)$estimate
r_squared_EB_vs_FC <- summary(lm(summary$EB_logFC ~ summary$featureCounts_logFC, data=summary))$adj.r.squared
plot(summary$cyber_t_logFC, summary$limma_logFC)
rho_cyber_t_VS_limma <- cor.test(~ as.numeric(summary$cyber_t_logFC) + as.numeric(summary$limma_logFC), data=summary, method = "spearman", continuity = TRUE)$estimate
r_squared_cyber_t_vs_limma <- summary(lm(summary$cyber_t_logFC ~ summary$limma_logFC, data=summary))$adj.r.squared
plot(summary$cyber_t_logFC, summary$EB_logFC)
rho_cyber_t_vs_EB <- cor.test(~ as.numeric(summary$cyber_t_logFC) + as.numeric(summary$EB_logFC), data=summary, method = "spearman", continuity = TRUE)$estimate
r_squared_cyber_t_vs_EB <- summary(lm(summary$cyber_t_logFC ~ summary$EB_logFC, data=summary))$adj.r.squared
EB_exp_mat_for_moomin <- data.frame(EBseq_corresponding_genes$SystematicName, EBseq_corresponding_genes$EBseq_PPDE, EBseq_corresponding_genes$EB_logFC)
colnames(EB_exp_mat_for_moomin) <- c("GeneID", "PPDE", "FC")
write.table(EB_exp_mat_for_moomin, file = "Moomin_input/EBseq_res.tsv", quote=F, sep="\t", row.names = F)
install.packages("rmarkdown")
