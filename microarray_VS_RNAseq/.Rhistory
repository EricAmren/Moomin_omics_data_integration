merged_df <- merge(RNASeq_moomin_output, microarray_moomin_output, by="row.names", all.x=TRUE)
colnames(merged_df) <- c("reaction_ID", "RNA_color", "microarray_color")
# Number of reaction with same color ?
length(which(merged_df$RNA_color == merged_df$microarray_color))
no_good <- merged_df[merged_df$RNA_color != merged_df$microarray_color,]
erf <- no_good[no_good$microarray_color == 0,]
dim(no_good)
dim(erf)
rho_dabb <- cor.test(~ as.numeric(merged_df$RNA_color) + as.numeric(merged_df$microarray_color), data=merged_df, method = "spearman", continuity = TRUE)$estimate
rho_dabb
plot(merged_df$RNA_color, merged_df$microarray_color,
main = "Limma vs EdgeR logFC comparison",
xlab = "Limma logFC",
ylab = "EdgeR logFC")
dim(corresponding_names)
dim(blast)
dim(corresponding_names)
dim(blast)
dim(EBseq_counts_df)
dim(EBseq_counts_df)
dim(counts_list)
dim(gene_ids)
length(gene_ids)
dim(blast)
dim(corresponding_names)
length(rnames)
dim(cyber_t_results)
View(cyber_t_results)
View(cyber_t_results)
length(corresponding_names)
dim(corresponding_names)
dim(cyber_t_results)
cyber_t_results <- read.table("Microarray/results/cyber_t_results.txt")
colnames(cyber_t_results) <- c("gene_id", "cyber_t_PPDE", "cyber_t_logFC")
head(cyber_t_results)
dim(summary)
dim(only_significant_values)
library(knitr)
library(rmdformats)
library(DT)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(limma)
library(gplots)
library(dplyr)
source("Microarray/cyber-t_R_scripts/bayesreg.R")
setwd("Microarray/microarray_data/raw_data")
summaryTable<-read.delim("summaryTable.txt",check.names=FALSE,stringsAsFactors=FALSE)
microarrayData <-read.maimages(summaryTable[,"FileName"],source="agilent",green.only=TRUE)
neg95 <- apply(microarrayData$E[microarrayData$genes$ControlType==-1,],2,function(x) quantile(x,p=0.95)) #95 percentile of negative probes
cutoff <- matrix(1.1*neg95,nrow(microarrayData),ncol(microarrayData),byrow=TRUE) # keep probes that are 10% brighter than the negative probes
filtered <- rowSums(microarrayData$E > cutoff) >= 3
noNegData <- microarrayData[microarrayData$genes$ControlType==0 & filtered,]
df <- as.data.frame(noNegData$E)
df <- cbind(noNegData$genes$SystematicName,df)
df <- aggregate(df[,2:7], list(df$`noNegData$genes$SystematicName`), median) # Merging duplicates and keeping median values
colnames(df) <- c("gene_id", "C1", "C2", "C3", "E1", "E2", "E3" )
df <- df[c("gene_id", "E1", "E2", "E3", "C1", "C2", "C3")] # Rearranging df so our values are in the same order than RNAseq data
df <- format(df,  scientific = TRUE)
write.table(df, file="Microarray/microarray_data/processed_data/processed_MA_results.txt", col.names=FALSE, row.names=FALSE, sep =",", quote = FALSE)
dataFile<-read.table("Microarray/microarray_data/processed_data/processed_MA_results.txt",sep=",", header = TRUE, row.names = 1)
cyber_t_results <- bayesT(dataFile,numC=3,numE=3,ppde=1, bayes=1, winSize=101, conf=4)
logFC <- log(cyber_t_results$meanE / cyber_t_results$meanC)
cyber_t_output <- data.frame(rownames(cyber_t_results), cyber_t_results$ppde.p, cyber_t_results$fold)
cyber_t_output <- data.frame(rownames(cyber_t_results), cyber_t_results$ppde.p, logFC)
cyber_t_output <- cyber_t_output[order(cyber_t_output$cyber_t_results.ppde.p, decreasing=TRUE), ]
write.table(cyber_t_output, file="Microarray/results/cyber_t_results.txt", quote = FALSE, row.names = FALSE, col.names = FALSE)
# Re-using a table from older study to associate gene names with probe names. (gene names <-> probe names <-> ECs name)
blast <- read.table("misc/SakaiRNASeq/3.Microarray_Vs_RNASeq/3.table merge/final_blast_Table.txt", sep='\t', header=TRUE)
corresponding_names <- merge(dplyr::select(blast, query.name, subject), dplyr::select(noNegData$genes, ProbeName, SystematicName), by.x="query.name", by.y="ProbeName")
corresponding_names <- unique(corresponding_names)
write.table(corresponding_names, file="Comparison/reference_table.txt")
library(memisc)
par(mfrow=c(2,3))
files <- list.files("RNAseq/RNAseq_countings", pattern="*.tsv$", full.names=TRUE, recursive=FALSE)
get_title <- function(x) {
title=cases(
"sample 1 : Control"=grepl("ERR2955747", x),
"sample 2 : Control"=grepl("ERR2955748", x),
"sample 3 : Control"=grepl("ERR2955749", x),
"sample 4 : with spinach leaves"=grepl("ERR2955750", x),
"sample 5 : with spinach leaves"=grepl("ERR2955751", x),
"sample 6 : with spinach leaves"=grepl("ERR2955752", x),
"wtfisthat"=TRUE
)
}
listplot <- function(x) {
data = read.csv(file = x, header = TRUE, sep = "\t", skip=1)
plot(data[,length(data)], type = "p",
main = get_title(x),
xlab = "genes",
ylab = "counts"
)
}
lapply(files,listplot)
getLastColumn <- function(x){
content = read.csv(file = x, header = TRUE, sep = "\t", skip=1)
return(content[,length(content)])
}
counts_list <- lapply(files,getLastColumn)
gene_ids <- read.csv(file = "RNAseq/RNAseq_countings/trimmed_ERR2955747.tsv", header = TRUE, sep = "\t", skip=1)[,1]
length(gene_ids)
EBseq_counts_df <- data.frame(gene_ids)
EBseq_counts_df <- cbind(EBseq_counts_df, counts_list)
colnames(EBseq_counts_df) <- c("gene_id", "ERR2955750", "ERR2955751", "ERR2955752", "ERR2955747", "ERR2955748", "ERR2955749")
EBseq_counts_df <- EBseq_counts_df[c("gene_id", "ERR2955747", "ERR2955748", "ERR2955749", "ERR2955750", "ERR2955751", "ERR2955752")]
write.table(EBseq_counts_df, file="RNAseq/processed_counts.txt", row.names=FALSE,sep ="\t", quote = FALSE )
library(EBSeq)
counts = read.csv("RNAseq/processed_counts.txt", header = TRUE, sep = "\t")
data=as.matrix(counts)
rnames=counts[,1]
rownames(data)=rnames
data=data[,-1]
class(data)="numeric"
conditions = as.factor(c("C1","C1","C1","C2","C2","C2"))
Sizes=MedianNorm(data)
EBOut=EBTest(Data=data,Conditions=conditions,sizeFactors=Sizes, maxround=5)
EBDERes=GetDEResults(EBOut, FDR=0.05)
EBseq_results <-data.frame(EBDERes$PPMat, counts[2:7])
EBseq_results <- EBseq_results[order(EBseq_results$PPDE, decreasing=TRUE),]
rounds = 5
diff(EBOut$Alpha[(rounds-2):rounds,])
diff(EBOut$Beta[(rounds-2):rounds,])
diff(EBOut$P[(rounds-2):rounds,])
par(mfrow=c(1,1))
QQP(EBOut)
DenNHist(EBOut)
EBFC <- PostFC(EBOut)
df_EBFC <- as.data.frame(EBFC["PostFC"])
df_EBFC <- data.frame(ECs=rownames(df_EBFC), logFC=log(df_EBFC[,1]))
df1 <- data.frame(EBDERes$PPMat)
df1$names <- rownames(EBDERes$PPMat)
final_EBseq_results <- merge(df1, df_EBFC, by.x="names", by.y="ECs")
write.table(final_EBseq_results, file="RNAseq/EBseq_results/final_EBseq_results.tsv", sep="\t", row.names = FALSE, quote = FALSE)
#rm(list=ls())
cyber_t_results <- read.table("Microarray/results/cyber_t_results.txt")
colnames(cyber_t_results) <- c("gene_id", "cyber_t_PPDE", "cyber_t_logFC")
head(cyber_t_results)
cyber_t_results <- format(cyber_t_results, scientific = FALSE)
EBseq_results <- read.table("RNAseq/EBseq_results/final_EBseq_results.tsv", header=TRUE)
small_EBseq_results <- data.frame(gsub("ECs_", "ECs", EBseq_results$names), EBseq_results$PPDE, EBseq_results$logFC)
colnames(small_EBseq_results) <- c("gene_id", "EBseq_PPDE", "EBseq_logFC")
head(small_EBseq_results)
references <- read.table("Comparison/reference_table.txt")
EBseq_corresponding_genes <- merge(small_EBseq_results, references, by.x="gene_id", by.y="subject")
colnames(EBseq_corresponding_genes) <- c("ECs","EBseq_PPDE","EB_logFC","query.name", "SystematicName")
# Results from the paper for microarray (using limma)
limma_results<-read.table("misc/SakaiRNASeq/1.Microarray_Data_Analysis/microarrayTopTable.txt",sep='\t', header = TRUE)
# This file got an error in the naming of the columns. They are all misaligned of one col to the left. Need a fix
# bad_colnames <- colnames(limma_results)
# new_colnames <-c(bad_colnames[length(bad_colnames)], bad_colnames[1:length(bad_colnames)-1])
# colnames(limma_results) <- new_colnames
small_limma_results <- dplyr::select(limma_results, SystematicName, logFC, adj.P.Val)
colnames(small_limma_results) <- c("gene_id", "limma_logFC", "limma_Pval")
rnaseq_results <- read.table("misc/SakaiRNASeq/2.RNASeq_Data_Analysis/3. DEG_analysis/RNAseqTopTable-Paired.txt", skip=1)
colnames(rnaseq_results) <- c("ECs", "logFC", "t", "P.Value", "adj.P.Val", "b")
EdgeR_corresponding_genes <- merge(rnaseq_results, references, by.x="ECs", by.y="subject")
EdgeR_corresponding_genes <- data.frame(EdgeR_corresponding_genes$SystematicName, EdgeR_corresponding_genes$P.Value,EdgeR_corresponding_genes$logFC)
colnames(EdgeR_corresponding_genes) <- c("gene_id", "EdgeR_Pval", "EdgeR_logFC")
summary <- merge(cyber_t_results, EBseq_corresponding_genes, by.x="gene_id", by.y="SystematicName")
summary <- merge(summary, EdgeR_corresponding_genes, by="gene_id")
summary <- merge(summary, small_limma_results, by="gene_id")
summary <- summary[c("gene_id", "cyber_t_logFC", "EB_logFC", "limma_logFC", "EdgeR_logFC", "cyber_t_PPDE", "EBseq_PPDE", "limma_Pval", "EdgeR_Pval")]
dim(summary)
only_significant_values<-summary[(summary$cyber_t_PPDE > 0.95 & summary$EBseq_PPDE > 0.95 & summary$limma_Pval < 0.05 & summary$EdgeR_Pval < 0.05),]
dim(only_significant_values)
only_significant_values[complete.cases(only_significant_values), ]
only_significant_values <- na.omit(only_significant_values)
dim(only_significant_values)
dim(summary)
summary[complete.cases(summary), ]
summary <- na.omit(summary)
dim(summary)
plot(summary$limma_logFC, summary$EdgeR_logFC,
main = "Limma vs EdgeR logFC comparison",
xlab = "Limma logFC",
ylab = "EdgeR logFC",
xlim = c(-6,6),
ylim = c(-6,6))
rho_limma_vs_FC <- cor.test(~ as.numeric(summary$limma_logFC) + as.numeric(summary$EdgeR_logFC), data=summary, method = "spearman", continuity = TRUE)$estimate
r_squared_limma_vs_FC <- summary(lm(summary$limma_logFC ~ summary$EdgeR_logFC, data=summary))$adj.r.squared
rho_limma_vs_FC2 <- cor.test(~ as.numeric(only_significant_values$limma_logFC) + as.numeric(only_significant_values$EdgeR_logFC), data=only_significant_values, method = "spearman", continuity = TRUE)$estimate
r_squared_limma_vs_FC2 <- summary(lm(only_significant_values$limma_logFC ~ only_significant_values$EdgeR_logFC, data=only_significant_values))$adj.r.squared
plot(summary$EB_logFC, summary$EdgeR_logFC,
main = "EBseq vs EdgeR logFC comparison",
xlab = "EBseq logFC",
ylab = "EdgeR logFC",
xlim = c(-6,6),
ylim = c(-6,6))
rho_EB_vs_FC <- cor.test(~ as.numeric(summary$EB_logFC) + as.numeric(summary$EdgeR_logFC), data=summary, method = "spearman", continuity = TRUE)$estimate
r_squared_EB_vs_FC <- summary(lm(summary$EB_logFC ~ summary$EdgeR_logFC, data=summary))$adj.r.squared
plot(summary$cyber_t_logFC, summary$limma_logFC,
main = "Cyber-t vs limma logFC comparison",
xlab = "Cyber-t logFC",
ylab = "limma logFC",
xlim = c(-6,6),
ylim = c(-6,6))
rho_cyber_t_vs_limma <- cor.test(~ as.numeric(summary$cyber_t_logFC) + as.numeric(summary$limma_logFC), data=summary, method = "spearman", continuity = TRUE)$estimate
r_squared_cyber_t_vs_limma <- summary(lm(summary$cyber_t_logFC ~ summary$limma_logFC, data=summary))$adj.r.squared
plot(summary$cyber_t_logFC, summary$EB_logFC,
main = "Cyber-t vs EBseq logFC comparison",
xlab = "Cyber-t logFC",
ylab = "EBseq logFC",
xlim = c(-6,6),
ylim = c(-6,6))
rho_cyber_t_vs_EB <- cor.test(~ as.numeric(summary$cyber_t_logFC) + as.numeric(summary$EB_logFC), data=summary, method = "spearman", continuity = TRUE)$estimate
r_squared_cyber_t_vs_EB <- summary(lm(summary$cyber_t_logFC ~ summary$EB_logFC, data=summary))$adj.r.squared
rho_cyber_t_vs_EB2 <- cor.test(~ as.numeric(only_significant_values$cyber_t_logFC) + as.numeric(only_significant_values$EB_logFC), data=only_significant_values, method = "spearman", continuity = TRUE)$estimate
r_squared_cyber_t_vs_EB2 <- summary(lm(only_significant_values$cyber_t_logFC ~ only_significant_values$EB_logFC, data=only_significant_values))$adj.r.squared
rho <- c(rho_limma_vs_FC,rho_EB_vs_FC,rho_cyber_t_vs_limma,rho_cyber_t_vs_EB,rho_limma_vs_FC2,rho_cyber_t_vs_EB2)
r_squared <- c(r_squared_limma_vs_FC,r_squared_EB_vs_FC,r_squared_cyber_t_vs_limma,r_squared_cyber_t_vs_EB,r_squared_limma_vs_FC2,r_squared_cyber_t_vs_EB2)
stat_table <- tibble(rho, r_squared)
colnames(stat_table) <- c("Spearman : rho", "R²")
rownames(stat_table) <- c("Limma / EdgeR","EBseq / EdgeR","Cyber-t / Limma","Cyber-T / EBseq", "limma / FC (above threshold)", "Cyber-t / EBseq (above threshold)")
kable(stat_table)
with(summary, plot(cyber_t_logFC, cyber_t_PPDE, pch=20, main="Cyber-t", xlim=c(-2,2)))
with(summary, plot(limma_logFC, limma_Pval, pch=20, main="Limma",  xlim=c(-2,2)))
with(summary, plot(EB_logFC, EBseq_PPDE, pch=20, main="EBseq",  xlim=c(-2,2)))
with(summary, plot(EdgeR_logFC, EdgeR_Pval, pch=20, main="EdgeR",  xlim=c(-2,2)))
EB_exp_mat_for_moomin <- data.frame(only_significant_values$gene_id, only_significant_values$EBseq_PPDE, only_significant_values$EB_logFC)
colnames(EB_exp_mat_for_moomin) <- c("GeneID", "PPDE", "FC")
write.table(EB_exp_mat_for_moomin, file = "Moomin_input/EBseq_res.tsv", quote=F, sep="\t", row.names = F)
cyber_t_exp_mat <- data.frame(only_significant_values$gene_id, only_significant_values$cyber_t_PPDE, only_significant_values$cyber_t_logFC)
colnames(cyber_t_exp_mat) <- c("GeneID", "PPDE", "FC")
write.table(cyber_t_exp_mat, file = "Moomin_input/cyber_t_res.tsv", quote=F, sep="\t", row.names = F)
library("rjson")
RNASeq_moomin_output <- t(as.data.frame(fromJSON(file = "../Cyber-t_integration_to_Moomin/output/EBseq_output_stoich.json")))
RNA_output <- cbind.data.frame(rownames(RNASeq_moomin_output), RNASeq_moomin_output)
microarray_moomin_output <- t(as.data.frame(fromJSON(file = "../Cyber-t_integration_to_Moomin/output/cyber_t_output_stoich.json")))
microarray_output <- cbind.data.frame(rownames(microarray_moomin_output), microarray_moomin_output)
merged_df <- merge(RNASeq_moomin_output, microarray_moomin_output, by="row.names", all.x=TRUE)
colnames(merged_df) <- c("reaction_ID", "RNA_color", "microarray_color")
# Number of reaction with same color ?
length(which(merged_df$RNA_color == merged_df$microarray_color))
no_good <- merged_df[merged_df$RNA_color != merged_df$microarray_color,]
erf <- no_good[no_good$microarray_color == 0,]
dim(no_good)
dim(erf)
rho_dabb <- cor.test(~ as.numeric(merged_df$RNA_color) + as.numeric(merged_df$microarray_color), data=merged_df, method = "spearman", continuity = TRUE)$estimate
rho_dabb
plot(merged_df$RNA_color, merged_df$microarray_color,
main = "Limma vs EdgeR logFC comparison",
xlab = "Limma logFC",
ylab = "EdgeR logFC")
plot(summary$limma_logFC, summary$EdgeR_logFC,
main = "Limma vs EdgeR logFC comparison",
xlab = "Limma logFC",
ylab = "EdgeR logFC",
xlim = c(-6,6),
ylim = c(-6,6))
rho_limma_vs_FC <- cor.test(~ as.numeric(summary$limma_logFC) + as.numeric(summary$EdgeR_logFC), data=summary, method = "spearman", continuity = TRUE)$estimate
r_squared_limma_vs_FC <- summary(lm(summary$limma_logFC ~ summary$EdgeR_logFC, data=summary))$adj.r.squared
rho_limma_vs_FC2 <- cor.test(~ as.numeric(only_significant_values$limma_logFC) + as.numeric(only_significant_values$EdgeR_logFC), data=only_significant_values, method = "spearman", continuity = TRUE)$estimate
r_squared_limma_vs_FC2 <- summary(lm(only_significant_values$limma_logFC ~ only_significant_values$EdgeR_logFC, data=only_significant_values))$adj.r.squared
# Load the package required to read JSON files.
library("rjson")
# Give the input file name to the function.
result <- fromJSON(file = "/home/ericcumunel/Documents/Aster/spike_in/pretty_coverage.json")
# Print the result.
print(result)
test <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_remapped_filtered')
test
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
real_quantifications
length(real_quantifications)
test$V3 <- real_quantifications
test <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_remapped_filtered')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
test["V3"] <- NA
test$V3 <- real_quantifications
test
test$V3 <- real_quantifications$V1
nrow(test)
nrow(real_quantifications)
real_quantifications
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- real_quantifications$V1
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
real_quantifications["transcript_names"] <- transcript_names$V1
real_quantifications
test1 <- data.frame(test, real_quantifications)
real_quantifications
test
test <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_remapped_filtered')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
test
merged_df <- merge(test, real_quantifications, by.x ="V2", by.y ="transcript_names")
merged_df
cor(merged_df$V1.x, merged_df$V1.y, method = "spearman")
merged_df$V1.y = merged_df$V1.y.astype(float)
a <- "1/4"
as.numerical(a)
as.numeric(a)
b <-as.numeric(a)
b <-str(as.numeric(a))
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
real_quantifications
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/numbers')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
test1 <- data.frame(test, real_quantifications)
test <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_remapped_filtered')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/numbers')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
real_quantifications
merged_df <- merge(test, real_quantifications, by.x ="V2", by.y ="transcript_names")
merged_df
cor(merged_df$V1.x, merged_df$V1.y, method = "spearman")
test <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_remapped_filtered')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(test, real_quantifications, by.x ="V2", by.y ="transcript_names")
cor(merged_df$V1.x, merged_df$V1.y, method = "spearman")
test <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_BYK_GCB_ONT_1_FAK69539_A.basecallHA.against_complete_transcriptome.remapped.filtered.tab')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(test, real_quantifications, by.x ="V2", by.y ="transcript_names")
cor(merged_df$V1.x, merged_df$V1.y, method = "spearman")
boxplot(merged_df$V1.x, merged_df$V1.y)
merged_df
write.table(merged_df, file = "test.tsv", quote = FALSE, sep = '\t', col.names = FALSE)
write.table(merged_df, file = "test.tsv", quote = FALSE, sep = '\t', col.names = FALSE, row.names = FALSE)
merged_df
cor(merged_df$V1.x, merged_df$V1.y, method = "spearman")
remapped <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_BYK_GCB_ONT_1_FAK69539_A.basecallHA.against_complete_transcriptome.remapped.filtered.tab')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(remapped, real_quantifications, by.x ="V2", by.y ="transcript_names")
write.table(merged_df, file = "remapped.tsv", quote = FALSE, sep = '\t', col.names = FALSE, row.names = FALSE)
cor(merged_df$V1.x, merged_df$V1.y, method = "spearman")
merged_df
not_remapped <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_BYK_GCB_ONT_1_FAK69539_A.basecallHA.against_complete_transcriptome.remapped.filtered.tab')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(not_remapped, real_quantifications, by.x ="V2", by.y ="transcript_names")
write.table(merged_df, file = "not_remapped.tsv", quote = FALSE, sep = '\t', col.names = FALSE, row.names = FALSE)
cor(merged_df$V1.x, merged_df$V1.y, method = "spearman")
merged_df
remapped <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_BYK_GCB_ONT_1_FAK69539_A.basecallHA.against_complete_transcriptome.remapped.filtered.tab')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(remapped, real_quantifications, by.x ="V2", by.y ="transcript_names")
write.table(merged_df, file = "/home/ericcumunel/Documents/Aster/multimap/remapped.tsv", quote = FALSE, sep = '\t', col.names = FALSE, row.names = FALSE)
cor(merged_df$V1.x, merged_df$V1.y, method = "spearman")
merged_df
not_remapped <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_BYK_GCB_ONT_1_FAK69539_A.basecallHA.against_complete_transcriptome.remapped.filtered.tab')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(not_remapped, real_quantifications, by.x ="V2", by.y ="transcript_names")
write.table(merged_df, file = "/home/ericcumunel/Documents/Aster/multimap/not_remapped.tsv", quote = FALSE, sep = '\t', col.names = FALSE, row.names = FALSE)
cor(merged_df$V1.x, merged_df$V1.y, method = "spearman")
merged_df
merged_df
remapped <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_BYK_GCB_ONT_1_FAK69539_A.basecallHA.against_complete_transcriptome.remapped.filtered.tab')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(remapped, real_quantifications, by.x ="V2", by.y ="transcript_names")
colnames(merged_df) <- c("transcript_name","nb_of_read", "real_quantif")
write.table(merged_df, file = "/home/ericcumunel/Documents/Aster/multimap/remapped.tsv", quote = FALSE, sep = '\t', col.names = TRUE, row.names = FALSE)
cor(merged_df$V1.x, merged_df$V1.y, method = "spearman")
merged_df
not_remapped <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_BYK_GCB_ONT_1_FAK69539_A.basecallHA.against_complete_transcriptome.remapped.filtered.tab')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(not_remapped, real_quantifications, by.x ="V2", by.y ="transcript_names")
colnames(merged_df) <- c("transcript_name","nb_of_read", "real_quantif")
write.table(merged_df, file = "/home/ericcumunel/Documents/Aster/multimap/not_remapped.tsv", quote = FALSE, sep = '\t', col.names = TRUE, row.names = FALSE)
cor(merged_df$V1.x, merged_df$V1.y, method = "spearman")
merged_df
not_remapped <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_BYK_GCB_ONT_1_FAK69539_A.basecallHA.against_complete_transcriptome.filtered.tab')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(not_remapped, real_quantifications, by.x ="V2", by.y ="transcript_names")
colnames(merged_df) <- c("transcript_name","nb_of_read", "real_quantif")
write.table(merged_df, file = "/home/ericcumunel/Documents/Aster/multimap/not_remapped.tsv", quote = FALSE, sep = '\t', col.names = TRUE, row.names = FALSE)
cor(merged_df$V1.x, merged_df$V1.y, method = "spearman")
merged_df
remapped <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_BYK_GCB_ONT_1_FAK69539_A.basecallHA.against_complete_transcriptome.sorted_by_read_name.filtered2.remapped.tab')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(remapped, real_quantifications, by.x ="V2", by.y ="transcript_names")
colnames(merged_df) <- c("transcript_name","nb_of_read", "real_quantif")
write.table(merged_df, file = "/home/ericcumunel/Documents/Aster/multimap/remapped.tsv", quote = FALSE, sep = '\t', col.names = TRUE, row.names = FALSE)
cor(merged_df$V1.x, merged_df$V1.y, method = "spearman")
merged_df
not_remapped <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_BYK_GCB_ONT_1_FAK69539_A.basecallHA.against_complete_transcriptome.sorted_by_read_name.filtered.tab')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(not_remapped, real_quantifications, by.x ="V2", by.y ="transcript_names")
colnames(merged_df) <- c("transcript_name","nb_of_read", "real_quantif")
write.table(merged_df, file = "/home/ericcumunel/Documents/Aster/multimap/not_remapped.tsv", quote = FALSE, sep = '\t', col.names = TRUE, row.names = FALSE)
cor(merged_df$V1.x, merged_df$V1.y, method = "spearman")
merged_df
remapped <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_BYK_GCB_ONT_1_FAK69539_A.basecallHA.against_complete_transcriptome.sorted_by_read_name.filtered2.remapped.tab')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(remapped, real_quantifications, by.x ="V2", by.y ="transcript_names")
colnames(merged_df) <- c("transcript_name","nb_of_read", "real_quantif")
write.table(merged_df, file = "/home/ericcumunel/Documents/Aster/multimap/remapped.tsv", quote = FALSE, sep = '\t', col.names = TRUE, row.names = FALSE)
cor(merged_df$V1.x, merged_df$V1.y, method = "spearman")
merged_df
not_remapped <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_BYK_GCB_ONT_1_FAK69539_A.basecallHA.against_complete_transcriptome.sorted_by_read_name.filtered.tab')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(not_remapped, real_quantifications, by.x ="V2", by.y ="transcript_names")
colnames(merged_df) <- c("transcript_name","nb_of_read", "real_quantif")
write.table(merged_df, file = "/home/ericcumunel/Documents/Aster/multimap/not_remapped.tsv", quote = FALSE, sep = '\t', col.names = TRUE, row.names = FALSE)
cor(merged_df$V1.x, merged_df$V1.y, method = "spearman")
merged_df
remapped <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_BYK_GCB_ONT_1_FAK69539_A.basecallHA.against_complete_transcriptome.sorted_by_read_name.filtered3.remapped.tab')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(remapped, real_quantifications, by.x ="V2", by.y ="transcript_names")
colnames(merged_df) <- c("transcript_name","nb_of_read", "real_quantif")
write.table(merged_df, file = "/home/ericcumunel/Documents/Aster/multimap/remapped.tsv", quote = FALSE, sep = '\t', col.names = TRUE, row.names = FALSE)
cor(merged_df$V1.x, merged_df$V1.y, method = "spearman")
merged_df
remapped <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_BYK_GCB_ONT_1_FAK69539_A.basecallHA.against_complete_transcriptome.sorted_by_read_name.filtered3.remapped.tab')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(remapped, real_quantifications, by.x ="V2", by.y ="transcript_names")
colnames(merged_df) <- c("transcript_name","nb_of_read", "real_quantif")
write.table(merged_df, file = "/home/ericcumunel/Documents/Aster/multimap/remapped.tsv", quote = FALSE, sep = '\t', col.names = TRUE, row.names = FALSE)
cor(merged_df$V1.x, merged_df$V1.y, method = "spearman")
merged_df
remapped <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_BYK_GCB_ONT_1_FAK69539_A.basecallHA.against_complete_transcriptome.sorted_by_read_name.filtered3.remapped.tab')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(remapped, real_quantifications, by.x ="V2", by.y ="transcript_names")
colnames(merged_df) <- c("transcript_name","nb_of_read", "real_quantif")
write.table(merged_df, file = "/home/ericcumunel/Documents/Aster/multimap/remapped.tsv", quote = FALSE, sep = '\t', col.names = TRUE, row.names = FALSE)
cor(merged_df$V1.x, merged_df$V1.y, method = "spearman")
remapped <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_BYK_GCB_ONT_1_FAK69539_A.basecallHA.against_complete_transcriptome.sorted_by_read_name.filtered3.remapped.tab')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(remapped, real_quantifications, by.x ="V2", by.y ="transcript_names")
colnames(merged_df) <- c("transcript_name","nb_of_read", "real_quantif")
write.table(merged_df, file = "/home/ericcumunel/Documents/Aster/multimap/remapped.tsv", quote = FALSE, sep = '\t', col.names = TRUE, row.names = FALSE)
cor(merged_df$V1.x, merged_df$V1.y, method = "spearman")
cor(merged_df$nb_of_read, merged_df$real_quantif, method = "spearman")
not_remapped <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_BYK_GCB_ONT_1_FAK69539_A.basecallHA.against_complete_transcriptome.sorted_by_read_name.filtered.tab')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(not_remapped, real_quantifications, by.x ="V2", by.y ="transcript_names")
colnames(merged_df) <- c("transcript_name","nb_of_read", "real_quantif")
write.table(merged_df, file = "/home/ericcumunel/Documents/Aster/multimap/not_remapped.tsv", quote = FALSE, sep = '\t', col.names = TRUE, row.names = FALSE)
cor(merged_df$nb_of_read, merged_df$real_quantif, method = "spearman")
remapped <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_BYK_GCB_ONT_1_FAK69539_A.basecallHA.against_complete_transcriptome.sorted_by_read_name.filtered3.remapped.tab')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(remapped, real_quantifications, by.x ="V2", by.y ="transcript_names")
colnames(merged_df) <- c("transcript_name","nb_of_read", "real_quantif")
write.table(merged_df, file = "/home/ericcumunel/Documents/Aster/multimap/remapped.tsv", quote = FALSE, sep = '\t', col.names = TRUE, row.names = FALSE)
cor(merged_df$nb_of_read, merged_df$real_quantif, method = "spearman")
remapped <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_BYK_GCB_ONT_1_FAK69539_A.basecallHA.against_complete_transcriptome.sorted_by_read_name.filtered3.remapped.tab')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(remapped, real_quantifications, by.x ="V2", by.y ="transcript_names")
colnames(merged_df) <- c("transcript_name","nb_of_read", "real_quantif")
write.table(merged_df, file = "/home/ericcumunel/Documents/Aster/multimap/remapped.tsv", quote = FALSE, sep = '\t', col.names = TRUE, row.names = FALSE)
cor(merged_df$nb_of_read, merged_df$real_quantif, method = "spearman")
not_remapped <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/quantif_BYK_GCB_ONT_1_FAK69539_A.basecallHA.against_complete_transcriptome.sorted_by_read_name.filtered.tab')
real_quantifications <- read.table(file = '/home/ericcumunel/Documents/Aster/multimap/transcript_real_quantif')
transcript_names <- read.table(file = "/home/ericcumunel/Documents/Aster/multimap/transcript_names")
real_quantifications["transcript_names"] <- transcript_names$V1
merged_df <- merge(not_remapped, real_quantifications, by.x ="V2", by.y ="transcript_names")
colnames(merged_df) <- c("transcript_name","nb_of_read", "real_quantif")
write.table(merged_df, file = "/home/ericcumunel/Documents/Aster/multimap/not_remapped.tsv", quote = FALSE, sep = '\t', col.names = TRUE, row.names = FALSE)
cor(merged_df$nb_of_read, merged_df$real_quantif, method = "spearman")
library(limma)
library(gplots)
library(dplyr)
source("Microarray/cyber-t_R_scripts/bayesreg.R")
source("cyber-t_R_scripts/bayesreg.R")
library(limma)
library(gplots)
library(dplyr)
source("cyber-t_R_scripts/bayesreg.R")
getwd()
setwd("Documents/Moomin_omics_data_integration/microarray_VS_RNAseq/")
summaryTable<-read.delim("microarray_data/raw_data/summaryTable.txt",check.names=FALSE,stringsAsFactors=FALSE)
